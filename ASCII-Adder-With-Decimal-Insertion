TITLE ; ASCII Addition with decimal insertion                     (ASCII_add.asm)



INCLUDE Irvine32.inc

INTEGER_NUMBER = 3
DECIMAL_OFFSET = 3						; offset from right of string
.data
message BYTE "This is decimal number without the offset",0
message2 BYTE "This is decimal number with an offset of:",0

decimal_one BYTE "123456"			; 555.555
decimal_two BYTE "111111"			; 111.222

adecimal BYTE ".",0

sum BYTE (SIZEOF decimal_one + 1) DUP(0),0
emptysum BYTE (SIZEOF decimal_one) DUP(0),0

.code
main PROC

mov edx, OFFSET message
call WriteString
call Crlf
; Start at the last digit position.

	mov	esi,SIZEOF decimal_one - 1
	mov	edi,SIZEOF decimal_one
	mov	ecx,SIZEOF decimal_one
	mov	bh,0					; set carry value to zero

L1:	mov	ah,0					; clear AH before addition
	mov	al,decimal_one[esi]		; get the first digit
	add	al,bh				; add the previous carry	
	aaa						; adjust the sum (AH = carry)
	mov	bh,ah				; save the carry in carry1
	or	bh,30h				; convert it to ASCII
	add	al,decimal_two[esi]		; add the second digit
	aaa						; adjust the sum (AH = carry) 
	or	bh,ah				; OR the carry with carry1
	or	bh,30h				; convert it to ASCII
	or	al,30h				; convert AL back to ASCII
	mov	sum[edi],al			; save it in the sum
	dec	esi 					; back up one digit
	dec	edi
	loop	L1
	mov	sum[edi],bh			; save last carry digit

; Display the sum as a string.

  	mov	edx,OFFSET sum
	call	WriteString
	call	Crlf
mov edx, OFFSET message2
call WriteString
mov eax, decimal_offset
call WriteInt
call Crlf
	mov esi, 0
	mov ecx, INTEGER_NUMBER+1

L2:
	mov al, sum[esi]
	mov emptysum[esi], al
	inc esi
	loop L2
	
	mov al, adecimal[0]
	mov emptysum[esi], al


	mov ecx, DECIMAL_OFFSET+3
L3:
	mov al, sum[esi]
	inc esi
	mov emptysum[esi], al
	loop L3	

	mov	edx,OFFSET emptysum
	call WriteString
	call Crlf

	
	exit
main ENDP
END main
