TITLE Chapter 6.3 Encryption Program

; This program uses symmetric encryption, 1 key to encrypt and decryppt

INCLUDE Irvine32.inc
KEY = 239                   ;ANY VALUE BETWEEN 1-255
BUFMAX = 128                ;MAXIMUM BUFFER SIZE

.data
sPrompt  BYTE "Enter the plain text:",0
sEncrypt BYTE "Cipher text:     ",0
sDecrypt BYTE "Decrypted:       ",0
buffer   BYTE   BUFMAX+1    DUP(0)
bufSize DWORD ?

.code

main PROC

	call	InputTheString			; input the plain text
	call	TranslateBuffer			; encrypt the buffer

	mov edx, OFFSET sEncrypt		; display encrypted message
	call DisplayMessage
	call TranslateBuffer			; decrypt the buffer
	mov edx, OFFSET sDecrypt		; display decrypted message
	call DisplayMessage

    exit
    main ENDP

    ;-------------------------------------------------------------------
    InputTheString PROC 
	
	; Prompts user for plaintext string. saves the string and length
	; Receives: nothing
	; Returns: nothing
	
       pushad						; save 32-bit registers
	   mov	edx, OFFSET sPrompt		; display a prompt
	   call	WriteString				;  "   "
       mov	ecx, BUFMAX				; maximum character count
	   mov edx, OFFSET buffer		; point to the buffer
	   call ReadString				; input the string
	   mov bufSize, eax				; save the length\
	   call crlf
	   popad
	   ret

    InputTheString ENDP		
	;-------------------------------------------------------------------

	;-------------------------------------------------------------------
	DisplayMessage PROC 
	
	; Displays the encrypted or decrypted message.
	; Receives: EDX points to the message
	; Returns: nothing
	
       pushad						
	   call	WriteString				
	   mov edx, OFFSET buffer		; display the buffer
	   call	WriteString	
	   call Crlf
	   call Crlf
	   popad
	   ret

    DisplayMessage  ENDP    ;--------------------------------------------

	;-------------------------------------------------------------------
	TranslateBuffer PROC 
	
	; Translates the string by XOR-ing each byte with encrypt key byte
	; Receives: nothing
	; Returns: nothing
	
        pushad						
	    mov	ecx, bufSize			; loop counter
	    mov	esi, 0					; index 0 in buffer
	L1:
		xor buffer[esi], KEY		; translate a byte
		inc esi						; point to next byte
		loop L1
		popad
		ret

    TranslateBuffer  ENDP    ;-------------------------------------------


END main
